{"uid":"fc2d6d0645e60f4d","name":"test_should_return_400_if_invalid_role","fullName":"tests.api.test_api_signup#test_should_return_400_if_invalid_role","historyId":"c8ed449ede1eb49781995277208bf9c3","time":{"start":1718558892808,"stop":1718558892820,"duration":12},"status":"failed","statusMessage":"AssertionError: Expected status code 400\nassert 500 == 400\n +  where 500 = <Response [500]>.status_code\n +    where <Response [500]> = HTTPError('500 Server Error:  for url: http://localhost:4001/users/signup').response","statusTrace":"sign_up_api = <api.post_sign_up.SignUp object at 0x7f3127410290>\n\n    def test_should_return_400_if_invalid_role(sign_up_api: SignUp):\n        user = get_random_user()\n        user.roles = [\"INVALID_ROLE\"]  # intentionally invalid role\n        try:\n>           response = sign_up_api.api_call(user)\n\ntests/api/test_api_signup.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/post_sign_up.py:8: in api_call\n    response = self.make_request(\"POST\", \"users/signup\", json=user_data, headers=headers)\napi/base_api.py:47: in make_request\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 500 Server Error:  for url: http://localhost:4001/users/signup\n\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/site-packages/requests/models.py:1021: HTTPError\n\nDuring handling of the above exception, another exception occurred:\n\nsign_up_api = <api.post_sign_up.SignUp object at 0x7f3127410290>\n\n    def test_should_return_400_if_invalid_role(sign_up_api: SignUp):\n        user = get_random_user()\n        user.roles = [\"INVALID_ROLE\"]  # intentionally invalid role\n        try:\n            response = sign_up_api.api_call(user)\n            response.raise_for_status()\n        except requests.exceptions.HTTPError as e:\n>           assert e.response.status_code == 400, \"Expected status code 400\"\nE           AssertionError: Expected status code 400\nE           assert 500 == 400\nE            +  where 500 = <Response [500]>.status_code\nE            +    where <Response [500]> = HTTPError('500 Server Error:  for url: http://localhost:4001/users/signup').response\n\ntests/api/test_api_signup.py:76: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1718558890972,"stop":1718558890989,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"sign_up_api","time":{"start":1718558892807,"stop":1718558892807,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected status code 400\nassert 500 == 400\n +  where 500 = <Response [500]>.status_code\n +    where <Response [500]> = HTTPError('500 Server Error:  for url: http://localhost:4001/users/signup').response","statusTrace":"sign_up_api = <api.post_sign_up.SignUp object at 0x7f3127410290>\n\n    def test_should_return_400_if_invalid_role(sign_up_api: SignUp):\n        user = get_random_user()\n        user.roles = [\"INVALID_ROLE\"]  # intentionally invalid role\n        try:\n>           response = sign_up_api.api_call(user)\n\ntests/api/test_api_signup.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/post_sign_up.py:8: in api_call\n    response = self.make_request(\"POST\", \"users/signup\", json=user_data, headers=headers)\napi/base_api.py:47: in make_request\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 500 Server Error:  for url: http://localhost:4001/users/signup\n\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/site-packages/requests/models.py:1021: HTTPError\n\nDuring handling of the above exception, another exception occurred:\n\nsign_up_api = <api.post_sign_up.SignUp object at 0x7f3127410290>\n\n    def test_should_return_400_if_invalid_role(sign_up_api: SignUp):\n        user = get_random_user()\n        user.roles = [\"INVALID_ROLE\"]  # intentionally invalid role\n        try:\n            response = sign_up_api.api_call(user)\n            response.raise_for_status()\n        except requests.exceptions.HTTPError as e:\n>           assert e.response.status_code == 400, \"Expected status code 400\"\nE           AssertionError: Expected status code 400\nE           assert 500 == 400\nE            +  where 500 = <Response [500]>.status_code\nE            +    where <Response [500]> = HTTPError('500 Server Error:  for url: http://localhost:4001/users/signup').response\n\ntests/api/test_api_signup.py:76: AssertionError","steps":[],"attachments":[{"uid":"a0cd566558b039d0","name":"log","source":"a0cd566558b039d0.txt","type":"text/plain","size":1282}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests.api"},{"name":"suite","value":"test_api_signup"},{"name":"host","value":"fv-az1215-453"},{"name":"thread","value":"3418-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.api.test_api_signup"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"d096e7864a6bb93","reportUrl":"https://Alwin82.github.io/python-e2e-localstack-tests/9//#testresult/d096e7864a6bb93","status":"failed","statusDetails":"AssertionError: Expected status code 400\nassert 500 == 400\n +  where 500 = <Response [500]>.status_code\n +    where <Response [500]> = HTTPError('500 Server Error:  for url: http://localhost:4001/users/signup').response","time":{"start":1718556416040,"stop":1718556416052,"duration":12}}]},"tags":[]},"source":"fc2d6d0645e60f4d.json","parameterValues":[]}